- Pandas 
   http://pandas.pydata.org/
   $ pip install pandas
   $ pip install matplotlib 
   $ pip install seaborn
   $ pip install scikit-learn
   $ pip install yfinance
   $ pip install bokeh

It gives:
   Information Graphics
   Information Visualization
   Statistical Graphics

- list the functions in modules
   >>> import pandas as pd
   >>> dir(pd)

- Pandas functions
FIRST OF ALL: Create dataframe from different data source.
------------+------------------+-----------------+----------------------------------------------
Data Format |  Read            |  Save           |  Comments
------------+------------------+-----------------+----------------------------------------------
csv         |  pd.read_csv()   |  df.to_csv()    |  csv stands for comma separated values.
json        |  pd.read_json()  |  df.to_json()   |
Excel       |  pd.read_excel() |  df.to_excel()  |
sql         |  pd.read_sql()   |  df.to_sql()    |
------------+------------------+-----------------+---------------------------------------------

- Basic Insights of Dataset (Data types)
  Use dataframe.dtypes to check data types
  >>> df.dtypes
-------------------------------+------------------------------------------+----------------------------------------
Pandas Type :                  | Native Python Type :                     | Description :                      
-------------------------------+------------------------------------------+----------------------------------------
   object                      |    string                                |   numbers and strings 
-------------------------------+------------------------------------------+----------------------------------------
   int64                       |    int                                   |   Numeric characters
-------------------------------+------------------------------------------+----------------------------------------
   float64                     |    float                                 |   Numeric characters with decimals 
-------------------------------+------------------------------------------+----------------------------------------
   datetime64, timedelta[ns]   |    N/A (but see the datatime module in   |   time data
                               |    Python's standard library)            |
-------------------------------+------------------------------------------+----------------------------------------


Various DataSet: 
   - https://archive.ics.uci.edu/datasets
   - To get Yahoo finance library
     $ pip install yfinance
   - Covid 19 data
     https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties-2020.csv
    
Auto as an example:
    https://archive.ics.uci.edu/ml/machine-learning-databases/autos/imports-85.data    
    https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/DA0101EN/auto.csv

''' 
3,?,alfa-romero,gas,std,two,convertible,rwd,front,88.60,168.80,64.10,48.80,2548,dohc,four,130,mpfi,3.47,2.68,9.00,111,5000,21,27,13495
3,?,alfa-romero,gas,std,two,convertible,rwd,front,88.60,168.80,64.10,48.80,2548,dohc,four,130,mpfi,3.47,2.68,9.00,111,5000,21,27,16500
2,164,audi,gas,std,four,sedan,4wd,front,99.40,176.60,66.40,54.30,2824,ohc,five,136,mpfi,3.19,3.40,8.00,115,5500,18,22,17450
2,?,audi,gas,std,two,sedan,fwd,front,99.80,177.30,66.30,53.10,2507,ohc,five,136,mpfi,3.19,3.40,8.50,110,5500,19,25,15250
1,158,audi,gas,std,four,sedan,fwd,front,105.80,192.70,71.40,55.70,2844,ohc,five,136,mpfi,3.19,3.40,8.50,110,5500,19,25,17710
:::::::::::::::::::::::::::::::::::::::::::::::::::::
'''

import pandas as pd
url = "https://archive.ics.uci.edu/ml/machine-learning-databases/autos/imports-85.data"

# import dataset without headers
df = pd.read_csv(url, header = None)
df = pd.read_csv(url, index_col=6, header = None)   # specify which column as index

#Replace default header by df.columns = headers
headers = ["symboling", "normalized-losses", "make", "fuel-type", "aspiration", "num-of-doors", "body-style",
           "drive-wheels", "enginie-location", "wheel-base", "length", "width", "height", "curb-weight", "engine-type",
           "num-of-cylinders", "engine-size", "fuel-system", "bore", "stroke", "compression-ratio", "horsepower", 
           "peak-rpm", "city-mpg", "highway-mpg", "price"]
           
df.columns = headers

# df prints the entire dataframe (not recommended for large datasets)
# df.head(n) to show the first n rows of data frame
# df.tail(n) to show the bottom n rows of data frame

df.head(5)

# Saving modified dataset 

path = "C:\Windows\...\automobile.csv"
df.to_csv(path)

# Returns a statistical summary
df.describe()

# To enable a summary of all the columns, add include="all"
df.describe(include="all")

# Another method to check the dataset 
df.info

# In the summary, 
# "Unique" is the number of distinct objects in the column, 
# "top" is the most frequently occurring object, 
# "freq" is the number of times the top object appears in the column.
# Some values in the table are shown here as "NaN", which stands for "not a number".
# This is because that particular statistical metric cannot be calculated for that specific
# column data type.

#################################################
# Dealing with missing values in Python
#
# - Usually “missing value: in dataset” appears as “?”, “N/A”, 0 or just a blank cell.
#
# - These are the typical options you can consider:
#   1. The first is to check if the person or group that collected the data can go back
#      and find what the actual value should be.
#   2. Another possibility is just to remove the data where that missing value is found.
#      When you drop data, you can either drop the whole variable or just the single data
#      entry with the missing value.
#      If you don’t have a lot of observations with missing data, usually dropping the particular
#      entry is the best.
#      If you’re removing data, you want to look to do something that has the least amount of impact.
#      Replacing data is better, since no data is wasted.  However, it is less accurate since we need 
#      to replace missing data with a guess of what the data should be.
#   3. One standard replacement technique is to replace missing values by the average value of the
#      entire variable.
#   4. If the values cannot be averaged, as with categorical variables. ie. the variable values are not numbers.
#      In this case, one possibility is to try using the most common.
#   5. in some cases, you may simply want to leave the missing data as missing data.
#
# - Drop values. Use dataframes.dropna()
#       axis=0  drops the entire row
#       axis=1  drops the entire column
#    Setting the argument “inplace” to “true” allows the modification to be done on the dataset directly.
#    “Inplace=True” just writes the result back into the dataframe.
#       df.dropna(subset=["price"], axis=0, inplace = True)
#
# - Replace missing values. Use dataframe.replace(missing_value, new_value) 
#   by mean value:
#      mean = df["normalized-losses"].mean()
#      df["normalized-losses"].replace(np.nan, mean)
#
#################################################

#############################################################################
# Data Formatting
# - To identify data types:
#     dataframe.dtypes()
# - To convert data types
#     dataframe.astype()
#     df["price"] = df["price"].astype("int")
# - Applying calculations to an entire column
#   Convert "mpg" to "L/100km" in Car dataset
#     df["city-mpg"] = 235/df["city-mpg"]
#     df.rename(columns={"city-mpg": "city-L/100km"}, inplace=True)
# - Incorrect data types
#   The wrong data type is assigned to a feature. ie. "object" is not correct type for "price"
#     df["price"].tail(5)
#       200    16845
#       201    19045
#       ::::::::::
#       204    22625
#       Name: price, dtype: object
#
#############################################################################

#################################################################
# Binning: Grouping of values into "bins"
#   Group a set of numberical values into a set of "bins"
#  ie.
#    bins = np.linspace(min(df["price"]), max(df["price"]), 4)
#    group_names = ["low", "medium", "high"]
#    df["price-binned"] = pd.cut(df["price"], bins, labels=group_names, include_lowest=True)
#
#################################################################

#####################################################
# Dummy variables in Python Pandas
#   pd.get_dummies(df['fuel'])
# which converts gas to 0, diesel to 1 in 'fuel'
#####################################################



